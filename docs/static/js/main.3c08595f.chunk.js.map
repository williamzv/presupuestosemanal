{"version":3,"sources":["components/Header.js","components/Formulario.js","components/Gasto.js","components/Listado.js","Helper.js","components/Presupuesto.js","components/Restante.js","components/ControlPresupuesto.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","titulo","FormularioGasto","nombreGasto","React","createRef","cantidadGasto","crearGasto","e","preventDefault","_this","current","value","gasto","agregarGasto","currentTarget","reset","onSubmit","this","className","ref","type","placeholder","Component","Gastos","_this$props$gasto","Listado","Object","keys","gastos","map","key","Gasto","revisarPresupuesto","presupuesto","restante","Presupuesto","Restante","ControlPresupuesto","Fragment","components_Presupuesto","components_Restante","App","state","isNaN","Number","objectSpread","concat","Date","now","restarPresupuesto","setState","cantidad","restar","String","obtenerPresupuesto","prompt","totalPresupuesto","parseInt","validarPresupuesto","components_Header","Formulario","components_Listado","components_ControlPresupuesto","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c08595f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => {\n    return (\n        <header>\n            <h1>{props.titulo}</h1>\n        </header>\n    )\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass FormularioGasto extends Component {\n    // Refs para los campos del formulario\n    nombreGasto = React.createRef();\n    cantidadGasto = React.createRef();\n\n    crearGasto = (e) => {\n        e.preventDefault();\n\n        if (this.nombreGasto.current.value === '' || this.cantidadGasto.current.value === '') {\n            return;\n        }\n\n        // Crear el objeto con los gastos\n        const gasto = {\n            nombreGasto: this.nombreGasto.current.value,\n            cantidadGasto: this.cantidadGasto.current.value\n        };\n\n        // Agregarlo y enviarlo por props\n        this.props.agregarGasto(gasto);\n\n        // Resetear el formulario (opcional)\n        e.currentTarget.reset();\n    };\n\n    render() {\n        return(\n            <form onSubmit={this.crearGasto}>\n                <h2>Agrega tus gastos aqu√≠</h2>\n                <div className=\"campo\">\n                    <label>Nombre Gasto</label>\n                    <input ref={this.nombreGasto} className=\"u-full-width\" type=\"text\" placeholder=\"Ej. Transporte\" />\n                </div>\n\n                <div className=\"campo\">\n                    <label>Cantidad</label>\n                    <input ref={this.cantidadGasto} className=\"u-full-width\" type=\"text\" placeholder=\"Ej. 300\" />\n                </div>\n\n                <input className=\"button-primary u-full-width\" type=\"submit\" value=\"Agregar\" />\n            </form>\n        )\n    }\n}\n\nFormularioGasto.propTypes = {\n    agregarGasto: PropTypes.func.isRequired\n}\n\nexport default FormularioGasto;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass Gastos extends Component {\n    render() {\n        const {cantidadGasto, nombreGasto} = this.props.gasto;\n\n        return (\n            <li className=\"gastos\">\n                <p>\n                    {nombreGasto}\n                    <span className=\"gasto\">$ {cantidadGasto}</span>\n                </p>\n            </li>\n        )\n    }\n}\nGastos.propTypes = {\n    gasto: PropTypes.object.isRequired\n}\n\n\nexport default Gastos;","import React, {Component} from 'react';\nimport Gastos from './Gasto';\nimport PropTypes from 'prop-types';\n\nclass Listado extends Component {\n    render() {\n        return (\n            <div className=\"gastos-realizados\">\n                <h2>Listado</h2>\n                {Object.keys(this.props.gastos).map(key => (\n                    <Gastos key={key} gasto={this.props.gastos[key]} />\n                ))}\n            </div>\n        )\n    }\n}\n\nListado.propTypes = {\n    gastos: PropTypes.object.isRequired\n}\n\nexport default Listado","export const validarPresupuesto = presupuesto => {\n    let totalPresupuesto = parseInt(presupuesto, 10)|| 0;\n\n    if(totalPresupuesto > 0 ) {\n        return totalPresupuesto;\n    } else {\n        return false;\n    }\n}\n\nexport const revisarPresupuesto = (presupuesto,restante) => {\n    let clase;\n    // Comprobar el 25% \n    if( (presupuesto / 4) > restante) {\n         clase = 'alert alert-danger';\n    } else if( (presupuesto / 2) > restante) {\n        clase = 'alert alert-warning'\n    } else {\n        clase = 'alert alert alert-success';\n    }\n    return clase;\n} ","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass Presupuesto extends Component {\n    render() {\n        return (\n            <div className=\"alert alert-primary\">\n                <p>Presupuesto $ {this.props.presupuesto}</p>\n            </div>\n        )\n    }\n}\n\nPresupuesto.propTypes = {\n    presupuesto: PropTypes.string.isRequired\n}\n\nexport default Presupuesto;\n","import React, {Component} from 'react';\nimport { revisarPresupuesto } from '../Helper';\nimport PropTypes from 'prop-types';\n\nclass Restante extends Component {\n    render() {\n        const presupuesto = this.props.presupuesto;\n        const restante = this.props.restante;\n\n        return (\n            <div className={revisarPresupuesto(presupuesto, restante)} >\n                <p>Restante $ {this.props.restante}</p>\n            </div>\n        )\n    }\n}\n\nRestante.propTypes = {\n    presupuesto: PropTypes.string.isRequired,\n    restante: PropTypes.string.isRequired\n}\n\nexport default Restante;","import React, {Component} from 'react';\nimport Presupuesto from './Presupuesto';\nimport Restante from './Restante';\nimport PropTypes from 'prop-types';\n\nclass ControlPresupuesto extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <Presupuesto presupuesto={this.props.presupuesto}/>\n                <Restante presupuesto={this.props.presupuesto} restante={this.props.restante} />\n            </React.Fragment>\n        )\n    }\n}\n\nControlPresupuesto.propTypes = {\n    presupuesto: PropTypes.string.isRequired,\n    restante: PropTypes.string.isRequired\n}\n\nexport default ControlPresupuesto;","import React, { Component } from 'react';\nimport '../css/App.css';\nimport Header from './Header';\nimport FormularioGasto from './Formulario';\nimport Listado from './Listado';\nimport { validarPresupuesto } from '../Helper';\nimport ControlPresupuesto from './ControlPresupuesto';\n\nclass App extends Component {\n  // Crear el state\n  state = {\n    presupuesto: '',\n    restante: '',\n    gastos: {}\n  };\n\n  componentDidMount() {\n    this.obtenerPresupuesto();\n  }\n  \n  obtenerPresupuesto() {\n    let presupuesto = prompt('Cu√°l es el presupuesto?');\n    let resultado = validarPresupuesto(presupuesto);\n    if (resultado) {\n      this.setState({presupuesto, restante: presupuesto});\n    } else {\n      this.obtenerPresupuesto();\n    }\n  }\n\n  // Agregar un nuevo gasto al state\n  agregarGasto = (gasto) => {\n    if (isNaN(Number(gasto.cantidadGasto))) {\n      return;\n    }\n    const gastos = {...this.state.gastos};  // Creat una copia del state actual\n    gastos[`gastos${Date.now()}`] = gasto;  // Agregar al gasto al objeto del state\n    this.restarPresupuesto(gasto.cantidadGasto); // Restar al presupuesto.\n    this.setState( {gastos});  // Guardarlo en el State\n  };\n\n  // Restar del presupuesto cuando un gasto se crea.\n  restarPresupuesto = (cantidad) => {\n    let restar = Number(cantidad);\n\n    // Tomar una copia del State actual\n    let restante = this.state.restante;\n\n    // Lo restamos\n    restante -= restar;\n\n    restante = String(restante);\n    this.setState({restante});\n  }\n\n  render() {\n    return (\n      <div className=\"App container\">\n          <Header titulo='Presupuesto Semanal' />\n          <div className=\"contenido-principal contenido\">\n            <div className=\"row\">\n              <div className=\"one-half column\">\n                <FormularioGasto agregarGasto={this.agregarGasto}/>\n              </div>\n              <div className=\"one-half column\">\n                <Listado gastos={this.state.gastos} />\n                <ControlPresupuesto presupuesto={this.state.presupuesto} restante={this.state.restante} />\n              </div>\n            </div>\n\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}